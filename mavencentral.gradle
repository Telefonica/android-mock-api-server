task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    PUBLISH_GROUP_ID = 'com.telefonica'
    PUBLISH_ARTIFACT_ID = 'mock'
    PUBLISH_VERSION = version

    PUBLISH_RELEASE_NAME = 'Android Mock Api Server - Android'
    PUBLISH_DESCRIPTION = 'Android Mock Api Server is a library to mock responses'
    PUBLISH_REPO_URL = 'https://github.com/Telefonica/android-mock-api-server'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            artifact("$buildDir/outputs/aar/library-release.aar")
            artifact androidSourcesJar

            pom {
                name = PUBLISH_RELEASE_NAME
                description = PUBLISH_DESCRIPTION
                url = PUBLISH_REPO_URL
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'android-team-telefonica'
                        name = 'Android Team'
                        email = 'cto-android@telefonica.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/Telefonica/android-mock-api-server.git'
                    developerConnection = 'scm:git:ssh://github.com/Telefonica/android-mock-api-server.git'
                    url = 'https://github.com/Telefonica/android-mock-api-server/tree/main'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.getByName("implementation").allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}
